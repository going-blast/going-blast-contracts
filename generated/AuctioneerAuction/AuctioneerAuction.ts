// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AuctionCancelled extends ethereum.Event {
  get params(): AuctionCancelled__Params {
    return new AuctionCancelled__Params(this);
  }
}

export class AuctionCancelled__Params {
  _event: AuctionCancelled;

  constructor(event: AuctionCancelled) {
    this._event = event;
  }

  get _lot(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class AuctionCreated extends ethereum.Event {
  get params(): AuctionCreated__Params {
    return new AuctionCreated__Params(this);
  }
}

export class AuctionCreated__Params {
  _event: AuctionCreated;

  constructor(event: AuctionCreated) {
    this._event = event;
  }

  get _lot(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class AuctionFinalized extends ethereum.Event {
  get params(): AuctionFinalized__Params {
    return new AuctionFinalized__Params(this);
  }
}

export class AuctionFinalized__Params {
  _event: AuctionFinalized;

  constructor(event: AuctionFinalized) {
    this._event = event;
  }

  get _lot(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Bid extends ethereum.Event {
  get params(): Bid__Params {
    return new Bid__Params(this);
  }
}

export class Bid__Params {
  _event: Bid;

  constructor(event: Bid) {
    this._event = event;
  }

  get _lot(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _bid(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _alias(): string {
    return this._event.parameters[3].value.toString();
  }

  get _options(): Bid_optionsStruct {
    return changetype<Bid_optionsStruct>(
      this._event.parameters[4].value.toTuple(),
    );
  }

  get _timestamp(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Bid_optionsStruct extends ethereum.Tuple {
  get paymentType(): i32 {
    return this[0].toI32();
  }

  get multibid(): BigInt {
    return this[1].toBigInt();
  }

  get message(): string {
    return this[2].toString();
  }

  get rune(): i32 {
    return this[3].toI32();
  }
}

export class ClaimYieldAll extends ethereum.Event {
  get params(): ClaimYieldAll__Params {
    return new ClaimYieldAll__Params(this);
  }
}

export class ClaimYieldAll__Params {
  _event: ClaimYieldAll;

  constructor(event: ClaimYieldAll) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountETH(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountGas(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ClaimedLot extends ethereum.Event {
  get params(): ClaimedLot__Params {
    return new ClaimedLot__Params(this);
  }
}

export class ClaimedLot__Params {
  _event: ClaimedLot;

  constructor(event: ClaimedLot) {
    this._event = event;
  }

  get _lot(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _rune(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get _userShareOfLot(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _tokens(): Array<ClaimedLot_tokensStruct> {
    return this._event.parameters[4].value.toTupleArray<ClaimedLot_tokensStruct>();
  }

  get _nfts(): Array<ClaimedLot_nftsStruct> {
    return this._event.parameters[5].value.toTupleArray<ClaimedLot_nftsStruct>();
  }
}

export class ClaimedLot_tokensStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get token(): Address {
    return this[1].toAddress();
  }
}

export class ClaimedLot_nftsStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get nft(): Address {
    return this[1].toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }
}

export class InitializedAuctions extends ethereum.Event {
  get params(): InitializedAuctions__Params {
    return new InitializedAuctions__Params(this);
  }
}

export class InitializedAuctions__Params {
  _event: InitializedAuctions;

  constructor(event: InitializedAuctions) {
    this._event = event;
  }
}

export class InitializedEmissions extends ethereum.Event {
  get params(): InitializedEmissions__Params {
    return new InitializedEmissions__Params(this);
  }
}

export class InitializedEmissions__Params {
  _event: InitializedEmissions;

  constructor(event: InitializedEmissions) {
    this._event = event;
  }
}

export class Linked extends ethereum.Event {
  get params(): Linked__Params {
    return new Linked__Params(this);
  }
}

export class Linked__Params {
  _event: Linked;

  constructor(event: Linked) {
    this._event = event;
  }

  get _auctioneer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _auctioneerUser(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _auctioneerEmissions(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _auctioneerAuction(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SelectedRune extends ethereum.Event {
  get params(): SelectedRune__Params {
    return new SelectedRune__Params(this);
  }
}

export class SelectedRune__Params {
  _event: SelectedRune;

  constructor(event: SelectedRune) {
    this._event = event;
  }

  get _lot(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _rune(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class UpdatedAlias extends ethereum.Event {
  get params(): UpdatedAlias__Params {
    return new UpdatedAlias__Params(this);
  }
}

export class UpdatedAlias__Params {
  _event: UpdatedAlias;

  constructor(event: UpdatedAlias) {
    this._event = event;
  }

  get _user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _alias(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class UpdatedBidCost extends ethereum.Event {
  get params(): UpdatedBidCost__Params {
    return new UpdatedBidCost__Params(this);
  }
}

export class UpdatedBidCost__Params {
  _event: UpdatedBidCost;

  constructor(event: UpdatedBidCost) {
    this._event = event;
  }

  get _bidCost(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdatedEarlyHarvestTax extends ethereum.Event {
  get params(): UpdatedEarlyHarvestTax__Params {
    return new UpdatedEarlyHarvestTax__Params(this);
  }
}

export class UpdatedEarlyHarvestTax__Params {
  _event: UpdatedEarlyHarvestTax;

  constructor(event: UpdatedEarlyHarvestTax) {
    this._event = event;
  }

  get _earlyHarvestTax(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdatedEmissionTaxDuration extends ethereum.Event {
  get params(): UpdatedEmissionTaxDuration__Params {
    return new UpdatedEmissionTaxDuration__Params(this);
  }
}

export class UpdatedEmissionTaxDuration__Params {
  _event: UpdatedEmissionTaxDuration;

  constructor(event: UpdatedEmissionTaxDuration) {
    this._event = event;
  }

  get _emissionTax(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdatedFarm extends ethereum.Event {
  get params(): UpdatedFarm__Params {
    return new UpdatedFarm__Params(this);
  }
}

export class UpdatedFarm__Params {
  _event: UpdatedFarm;

  constructor(event: UpdatedFarm) {
    this._event = event;
  }

  get _farm(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdatedPrivateAuctionRequirement extends ethereum.Event {
  get params(): UpdatedPrivateAuctionRequirement__Params {
    return new UpdatedPrivateAuctionRequirement__Params(this);
  }
}

export class UpdatedPrivateAuctionRequirement__Params {
  _event: UpdatedPrivateAuctionRequirement;

  constructor(event: UpdatedPrivateAuctionRequirement) {
    this._event = event;
  }

  get _requirement(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdatedRuneSwitchPenalty extends ethereum.Event {
  get params(): UpdatedRuneSwitchPenalty__Params {
    return new UpdatedRuneSwitchPenalty__Params(this);
  }
}

export class UpdatedRuneSwitchPenalty__Params {
  _event: UpdatedRuneSwitchPenalty;

  constructor(event: UpdatedRuneSwitchPenalty) {
    this._event = event;
  }

  get _penalty(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdatedRunicLastBidderBonus extends ethereum.Event {
  get params(): UpdatedRunicLastBidderBonus__Params {
    return new UpdatedRunicLastBidderBonus__Params(this);
  }
}

export class UpdatedRunicLastBidderBonus__Params {
  _event: UpdatedRunicLastBidderBonus;

  constructor(event: UpdatedRunicLastBidderBonus) {
    this._event = event;
  }

  get _bonus(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdatedStartingBid extends ethereum.Event {
  get params(): UpdatedStartingBid__Params {
    return new UpdatedStartingBid__Params(this);
  }
}

export class UpdatedStartingBid__Params {
  _event: UpdatedStartingBid;

  constructor(event: UpdatedStartingBid) {
    this._event = event;
  }

  get _startingBid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdatedTreasury extends ethereum.Event {
  get params(): UpdatedTreasury__Params {
    return new UpdatedTreasury__Params(this);
  }
}

export class UpdatedTreasury__Params {
  _event: UpdatedTreasury;

  constructor(event: UpdatedTreasury) {
    this._event = event;
  }

  get _treasury(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdatedTreasurySplit extends ethereum.Event {
  get params(): UpdatedTreasurySplit__Params {
    return new UpdatedTreasurySplit__Params(this);
  }
}

export class UpdatedTreasurySplit__Params {
  _event: UpdatedTreasurySplit;

  constructor(event: UpdatedTreasurySplit) {
    this._event = event;
  }

  get _split(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UserHarvestedLotEmissions extends ethereum.Event {
  get params(): UserHarvestedLotEmissions__Params {
    return new UserHarvestedLotEmissions__Params(this);
  }
}

export class UserHarvestedLotEmissions__Params {
  _event: UserHarvestedLotEmissions;

  constructor(event: UserHarvestedLotEmissions) {
    this._event = event;
  }

  get _lot(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _userEmissions(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _burnEmissions(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _harvestToFarm(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class AuctioneerAuction__auctionsResultEmissionsStruct extends ethereum.Tuple {
  get bp(): BigInt {
    return this[0].toBigInt();
  }

  get biddersEmission(): BigInt {
    return this[1].toBigInt();
  }

  get treasuryEmission(): BigInt {
    return this[2].toBigInt();
  }
}

export class AuctioneerAuction__auctionsResultRewardsStruct extends ethereum.Tuple {
  get estimatedValue(): BigInt {
    return this[0].toBigInt();
  }

  get tokens(): Array<AuctioneerAuction__auctionsResultRewardsTokensStruct> {
    return this[1].toTupleArray<AuctioneerAuction__auctionsResultRewardsTokensStruct>();
  }

  get nfts(): Array<AuctioneerAuction__auctionsResultRewardsNftsStruct> {
    return this[2].toTupleArray<AuctioneerAuction__auctionsResultRewardsNftsStruct>();
  }
}

export class AuctioneerAuction__auctionsResultRewardsTokensStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get token(): Address {
    return this[1].toAddress();
  }
}

export class AuctioneerAuction__auctionsResultRewardsNftsStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get nft(): Address {
    return this[1].toAddress();
  }
}

export class AuctioneerAuction__auctionsResultBidDataStruct extends ethereum.Tuple {
  get revenue(): BigInt {
    return this[0].toBigInt();
  }

  get bid(): BigInt {
    return this[1].toBigInt();
  }

  get bidTimestamp(): BigInt {
    return this[2].toBigInt();
  }

  get nextBidBy(): BigInt {
    return this[3].toBigInt();
  }

  get bidUser(): Address {
    return this[4].toAddress();
  }

  get bidRune(): i32 {
    return this[5].toI32();
  }

  get bids(): BigInt {
    return this[6].toBigInt();
  }

  get bidCost(): BigInt {
    return this[7].toBigInt();
  }
}

export class AuctioneerAuction__auctionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: string;
  value3: boolean;
  value4: BigInt;
  value5: BigInt;
  value6: AuctioneerAuction__auctionsResultEmissionsStruct;
  value7: AuctioneerAuction__auctionsResultRewardsStruct;
  value8: AuctioneerAuction__auctionsResultBidDataStruct;
  value9: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: string,
    value3: boolean,
    value4: BigInt,
    value5: BigInt,
    value6: AuctioneerAuction__auctionsResultEmissionsStruct,
    value7: AuctioneerAuction__auctionsResultRewardsStruct,
    value8: AuctioneerAuction__auctionsResultBidDataStruct,
    value9: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromTuple(this.value6));
    map.set("value7", ethereum.Value.fromTuple(this.value7));
    map.set("value8", ethereum.Value.fromTuple(this.value8));
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    return map;
  }

  getLot(): BigInt {
    return this.value0;
  }

  getDay(): BigInt {
    return this.value1;
  }

  getName(): string {
    return this.value2;
  }

  getIsPrivate(): boolean {
    return this.value3;
  }

  getUnlockTimestamp(): BigInt {
    return this.value4;
  }

  getUsers(): BigInt {
    return this.value5;
  }

  getEmissions(): AuctioneerAuction__auctionsResultEmissionsStruct {
    return this.value6;
  }

  getRewards(): AuctioneerAuction__auctionsResultRewardsStruct {
    return this.value7;
  }

  getBidData(): AuctioneerAuction__auctionsResultBidDataStruct {
    return this.value8;
  }

  getFinalized(): boolean {
    return this.value9;
  }
}

export class AuctioneerAuction__cancelAuctionResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getUnlockTimestamp(): BigInt {
    return this.value0;
  }

  getCancelledEmissions(): BigInt {
    return this.value1;
  }
}

export class AuctioneerAuction__claimLotResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }

  getUserShareOfLot(): BigInt {
    return this.value0;
  }

  getUserShareOfPayment(): BigInt {
    return this.value1;
  }

  getTriggerFinalization(): boolean {
    return this.value2;
  }
}

export class AuctioneerAuction__finalizeAuctionResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: boolean, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getTriggerCancellation(): boolean {
    return this.value0;
  }

  getTreasuryEmissions(): BigInt {
    return this.value1;
  }

  getTreasuryETHDistribution(): BigInt {
    return this.value2;
  }

  getFarmETHDistribution(): BigInt {
    return this.value3;
  }
}

export class AuctioneerAuction__getAuctionResultValue0Struct extends ethereum.Tuple {
  get lot(): BigInt {
    return this[0].toBigInt();
  }

  get day(): BigInt {
    return this[1].toBigInt();
  }

  get name(): string {
    return this[2].toString();
  }

  get isPrivate(): boolean {
    return this[3].toBoolean();
  }

  get unlockTimestamp(): BigInt {
    return this[4].toBigInt();
  }

  get users(): BigInt {
    return this[5].toBigInt();
  }

  get runes(): Array<AuctioneerAuction__getAuctionResultValue0RunesStruct> {
    return this[6].toTupleArray<AuctioneerAuction__getAuctionResultValue0RunesStruct>();
  }

  get windows(): Array<AuctioneerAuction__getAuctionResultValue0WindowsStruct> {
    return this[7].toTupleArray<AuctioneerAuction__getAuctionResultValue0WindowsStruct>();
  }

  get emissions(): AuctioneerAuction__getAuctionResultValue0EmissionsStruct {
    return changetype<AuctioneerAuction__getAuctionResultValue0EmissionsStruct>(
      this[8].toTuple(),
    );
  }

  get rewards(): AuctioneerAuction__getAuctionResultValue0RewardsStruct {
    return changetype<AuctioneerAuction__getAuctionResultValue0RewardsStruct>(
      this[9].toTuple(),
    );
  }

  get bidData(): AuctioneerAuction__getAuctionResultValue0BidDataStruct {
    return changetype<AuctioneerAuction__getAuctionResultValue0BidDataStruct>(
      this[10].toTuple(),
    );
  }

  get finalized(): boolean {
    return this[11].toBoolean();
  }
}

export class AuctioneerAuction__getAuctionResultValue0RunesStruct extends ethereum.Tuple {
  get runeSymbol(): i32 {
    return this[0].toI32();
  }

  get bids(): BigInt {
    return this[1].toBigInt();
  }

  get users(): BigInt {
    return this[2].toBigInt();
  }
}

export class AuctioneerAuction__getAuctionResultValue0WindowsStruct extends ethereum.Tuple {
  get windowType(): i32 {
    return this[0].toI32();
  }

  get windowOpenTimestamp(): BigInt {
    return this[1].toBigInt();
  }

  get windowCloseTimestamp(): BigInt {
    return this[2].toBigInt();
  }

  get timer(): BigInt {
    return this[3].toBigInt();
  }
}

export class AuctioneerAuction__getAuctionResultValue0EmissionsStruct extends ethereum.Tuple {
  get bp(): BigInt {
    return this[0].toBigInt();
  }

  get biddersEmission(): BigInt {
    return this[1].toBigInt();
  }

  get treasuryEmission(): BigInt {
    return this[2].toBigInt();
  }
}

export class AuctioneerAuction__getAuctionResultValue0RewardsStruct extends ethereum.Tuple {
  get estimatedValue(): BigInt {
    return this[0].toBigInt();
  }

  get tokens(): Array<AuctioneerAuction__getAuctionResultValue0RewardsTokensStruct> {
    return this[1].toTupleArray<AuctioneerAuction__getAuctionResultValue0RewardsTokensStruct>();
  }

  get nfts(): Array<AuctioneerAuction__getAuctionResultValue0RewardsNftsStruct> {
    return this[2].toTupleArray<AuctioneerAuction__getAuctionResultValue0RewardsNftsStruct>();
  }
}

export class AuctioneerAuction__getAuctionResultValue0RewardsTokensStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get token(): Address {
    return this[1].toAddress();
  }
}

export class AuctioneerAuction__getAuctionResultValue0RewardsNftsStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get nft(): Address {
    return this[1].toAddress();
  }
}

export class AuctioneerAuction__getAuctionResultValue0BidDataStruct extends ethereum.Tuple {
  get revenue(): BigInt {
    return this[0].toBigInt();
  }

  get bid(): BigInt {
    return this[1].toBigInt();
  }

  get bidTimestamp(): BigInt {
    return this[2].toBigInt();
  }

  get nextBidBy(): BigInt {
    return this[3].toBigInt();
  }

  get bidUser(): Address {
    return this[4].toAddress();
  }

  get bidRune(): i32 {
    return this[5].toI32();
  }

  get bids(): BigInt {
    return this[6].toBigInt();
  }

  get bidCost(): BigInt {
    return this[7].toBigInt();
  }
}

export class AuctioneerAuction__getAuctionExtResultAuctionStruct extends ethereum.Tuple {
  get lot(): BigInt {
    return this[0].toBigInt();
  }

  get day(): BigInt {
    return this[1].toBigInt();
  }

  get name(): string {
    return this[2].toString();
  }

  get isPrivate(): boolean {
    return this[3].toBoolean();
  }

  get unlockTimestamp(): BigInt {
    return this[4].toBigInt();
  }

  get users(): BigInt {
    return this[5].toBigInt();
  }

  get runes(): Array<AuctioneerAuction__getAuctionExtResultAuctionRunesStruct> {
    return this[6].toTupleArray<AuctioneerAuction__getAuctionExtResultAuctionRunesStruct>();
  }

  get windows(): Array<AuctioneerAuction__getAuctionExtResultAuctionWindowsStruct> {
    return this[7].toTupleArray<AuctioneerAuction__getAuctionExtResultAuctionWindowsStruct>();
  }

  get emissions(): AuctioneerAuction__getAuctionExtResultAuctionEmissionsStruct {
    return changetype<AuctioneerAuction__getAuctionExtResultAuctionEmissionsStruct>(
      this[8].toTuple(),
    );
  }

  get rewards(): AuctioneerAuction__getAuctionExtResultAuctionRewardsStruct {
    return changetype<AuctioneerAuction__getAuctionExtResultAuctionRewardsStruct>(
      this[9].toTuple(),
    );
  }

  get bidData(): AuctioneerAuction__getAuctionExtResultAuctionBidDataStruct {
    return changetype<AuctioneerAuction__getAuctionExtResultAuctionBidDataStruct>(
      this[10].toTuple(),
    );
  }

  get finalized(): boolean {
    return this[11].toBoolean();
  }
}

export class AuctioneerAuction__getAuctionExtResultAuctionRunesStruct extends ethereum.Tuple {
  get runeSymbol(): i32 {
    return this[0].toI32();
  }

  get bids(): BigInt {
    return this[1].toBigInt();
  }

  get users(): BigInt {
    return this[2].toBigInt();
  }
}

export class AuctioneerAuction__getAuctionExtResultAuctionWindowsStruct extends ethereum.Tuple {
  get windowType(): i32 {
    return this[0].toI32();
  }

  get windowOpenTimestamp(): BigInt {
    return this[1].toBigInt();
  }

  get windowCloseTimestamp(): BigInt {
    return this[2].toBigInt();
  }

  get timer(): BigInt {
    return this[3].toBigInt();
  }
}

export class AuctioneerAuction__getAuctionExtResultAuctionEmissionsStruct extends ethereum.Tuple {
  get bp(): BigInt {
    return this[0].toBigInt();
  }

  get biddersEmission(): BigInt {
    return this[1].toBigInt();
  }

  get treasuryEmission(): BigInt {
    return this[2].toBigInt();
  }
}

export class AuctioneerAuction__getAuctionExtResultAuctionRewardsStruct extends ethereum.Tuple {
  get estimatedValue(): BigInt {
    return this[0].toBigInt();
  }

  get tokens(): Array<AuctioneerAuction__getAuctionExtResultAuctionRewardsTokensStruct> {
    return this[1].toTupleArray<AuctioneerAuction__getAuctionExtResultAuctionRewardsTokensStruct>();
  }

  get nfts(): Array<AuctioneerAuction__getAuctionExtResultAuctionRewardsNftsStruct> {
    return this[2].toTupleArray<AuctioneerAuction__getAuctionExtResultAuctionRewardsNftsStruct>();
  }
}

export class AuctioneerAuction__getAuctionExtResultAuctionRewardsTokensStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get token(): Address {
    return this[1].toAddress();
  }
}

export class AuctioneerAuction__getAuctionExtResultAuctionRewardsNftsStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get nft(): Address {
    return this[1].toAddress();
  }
}

export class AuctioneerAuction__getAuctionExtResultAuctionBidDataStruct extends ethereum.Tuple {
  get revenue(): BigInt {
    return this[0].toBigInt();
  }

  get bid(): BigInt {
    return this[1].toBigInt();
  }

  get bidTimestamp(): BigInt {
    return this[2].toBigInt();
  }

  get nextBidBy(): BigInt {
    return this[3].toBigInt();
  }

  get bidUser(): Address {
    return this[4].toAddress();
  }

  get bidRune(): i32 {
    return this[5].toI32();
  }

  get bids(): BigInt {
    return this[6].toBigInt();
  }

  get bidCost(): BigInt {
    return this[7].toBigInt();
  }
}

export class AuctioneerAuction__getAuctionExtResultExtStruct extends ethereum.Tuple {
  get lot(): BigInt {
    return this[0].toBigInt();
  }

  get blockTimestamp(): BigInt {
    return this[1].toBigInt();
  }

  get isBiddingOpen(): boolean {
    return this[2].toBoolean();
  }

  get isEnded(): boolean {
    return this[3].toBoolean();
  }

  get activeWindow(): BigInt {
    return this[4].toBigInt();
  }
}

export class AuctioneerAuction__getAuctionExtResult {
  value0: AuctioneerAuction__getAuctionExtResultAuctionStruct;
  value1: AuctioneerAuction__getAuctionExtResultExtStruct;

  constructor(
    value0: AuctioneerAuction__getAuctionExtResultAuctionStruct,
    value1: AuctioneerAuction__getAuctionExtResultExtStruct,
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getAuction(): AuctioneerAuction__getAuctionExtResultAuctionStruct {
    return this.value0;
  }

  getExt(): AuctioneerAuction__getAuctionExtResultExtStruct {
    return this.value1;
  }
}

export class AuctioneerAuction__getAuctionExtsResultAuctionBasesStruct extends ethereum.Tuple {
  get lot(): BigInt {
    return this[0].toBigInt();
  }

  get day(): BigInt {
    return this[1].toBigInt();
  }

  get name(): string {
    return this[2].toString();
  }

  get isPrivate(): boolean {
    return this[3].toBoolean();
  }

  get unlockTimestamp(): BigInt {
    return this[4].toBigInt();
  }

  get users(): BigInt {
    return this[5].toBigInt();
  }

  get runes(): Array<AuctioneerAuction__getAuctionExtsResultAuctionBasesRunesStruct> {
    return this[6].toTupleArray<AuctioneerAuction__getAuctionExtsResultAuctionBasesRunesStruct>();
  }

  get windows(): Array<AuctioneerAuction__getAuctionExtsResultAuctionBasesWindowsStruct> {
    return this[7].toTupleArray<AuctioneerAuction__getAuctionExtsResultAuctionBasesWindowsStruct>();
  }

  get emissions(): AuctioneerAuction__getAuctionExtsResultAuctionBasesEmissionsStruct {
    return changetype<AuctioneerAuction__getAuctionExtsResultAuctionBasesEmissionsStruct>(
      this[8].toTuple(),
    );
  }

  get rewards(): AuctioneerAuction__getAuctionExtsResultAuctionBasesRewardsStruct {
    return changetype<AuctioneerAuction__getAuctionExtsResultAuctionBasesRewardsStruct>(
      this[9].toTuple(),
    );
  }

  get bidData(): AuctioneerAuction__getAuctionExtsResultAuctionBasesBidDataStruct {
    return changetype<AuctioneerAuction__getAuctionExtsResultAuctionBasesBidDataStruct>(
      this[10].toTuple(),
    );
  }

  get finalized(): boolean {
    return this[11].toBoolean();
  }
}

export class AuctioneerAuction__getAuctionExtsResultAuctionBasesRunesStruct extends ethereum.Tuple {
  get runeSymbol(): i32 {
    return this[0].toI32();
  }

  get bids(): BigInt {
    return this[1].toBigInt();
  }

  get users(): BigInt {
    return this[2].toBigInt();
  }
}

export class AuctioneerAuction__getAuctionExtsResultAuctionBasesWindowsStruct extends ethereum.Tuple {
  get windowType(): i32 {
    return this[0].toI32();
  }

  get windowOpenTimestamp(): BigInt {
    return this[1].toBigInt();
  }

  get windowCloseTimestamp(): BigInt {
    return this[2].toBigInt();
  }

  get timer(): BigInt {
    return this[3].toBigInt();
  }
}

export class AuctioneerAuction__getAuctionExtsResultAuctionBasesEmissionsStruct extends ethereum.Tuple {
  get bp(): BigInt {
    return this[0].toBigInt();
  }

  get biddersEmission(): BigInt {
    return this[1].toBigInt();
  }

  get treasuryEmission(): BigInt {
    return this[2].toBigInt();
  }
}

export class AuctioneerAuction__getAuctionExtsResultAuctionBasesRewardsStruct extends ethereum.Tuple {
  get estimatedValue(): BigInt {
    return this[0].toBigInt();
  }

  get tokens(): Array<AuctioneerAuction__getAuctionExtsResultAuctionBasesRewardsTokensStruct> {
    return this[1].toTupleArray<AuctioneerAuction__getAuctionExtsResultAuctionBasesRewardsTokensStruct>();
  }

  get nfts(): Array<AuctioneerAuction__getAuctionExtsResultAuctionBasesRewardsNftsStruct> {
    return this[2].toTupleArray<AuctioneerAuction__getAuctionExtsResultAuctionBasesRewardsNftsStruct>();
  }
}

export class AuctioneerAuction__getAuctionExtsResultAuctionBasesRewardsTokensStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get token(): Address {
    return this[1].toAddress();
  }
}

export class AuctioneerAuction__getAuctionExtsResultAuctionBasesRewardsNftsStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get nft(): Address {
    return this[1].toAddress();
  }
}

export class AuctioneerAuction__getAuctionExtsResultAuctionBasesBidDataStruct extends ethereum.Tuple {
  get revenue(): BigInt {
    return this[0].toBigInt();
  }

  get bid(): BigInt {
    return this[1].toBigInt();
  }

  get bidTimestamp(): BigInt {
    return this[2].toBigInt();
  }

  get nextBidBy(): BigInt {
    return this[3].toBigInt();
  }

  get bidUser(): Address {
    return this[4].toAddress();
  }

  get bidRune(): i32 {
    return this[5].toI32();
  }

  get bids(): BigInt {
    return this[6].toBigInt();
  }

  get bidCost(): BigInt {
    return this[7].toBigInt();
  }
}

export class AuctioneerAuction__getAuctionExtsResultAuctionExtsStruct extends ethereum.Tuple {
  get lot(): BigInt {
    return this[0].toBigInt();
  }

  get blockTimestamp(): BigInt {
    return this[1].toBigInt();
  }

  get isBiddingOpen(): boolean {
    return this[2].toBoolean();
  }

  get isEnded(): boolean {
    return this[3].toBoolean();
  }

  get activeWindow(): BigInt {
    return this[4].toBigInt();
  }
}

export class AuctioneerAuction__getAuctionExtsResult {
  value0: Array<AuctioneerAuction__getAuctionExtsResultAuctionBasesStruct>;
  value1: Array<AuctioneerAuction__getAuctionExtsResultAuctionExtsStruct>;

  constructor(
    value0: Array<AuctioneerAuction__getAuctionExtsResultAuctionBasesStruct>,
    value1: Array<AuctioneerAuction__getAuctionExtsResultAuctionExtsStruct>,
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTupleArray(this.value0));
    map.set("value1", ethereum.Value.fromTupleArray(this.value1));
    return map;
  }

  getAuctionBases(): Array<AuctioneerAuction__getAuctionExtsResultAuctionBasesStruct> {
    return this.value0;
  }

  getAuctionExts(): Array<AuctioneerAuction__getAuctionExtsResultAuctionExtsStruct> {
    return this.value1;
  }
}

export class AuctioneerAuction__getDailyAuctionsResultDataStruct extends ethereum.Tuple {
  get day(): BigInt {
    return this[0].toBigInt();
  }

  get lots(): Array<BigInt> {
    return this[1].toBigIntArray();
  }
}

export class AuctioneerAuction__getProfitDistributionsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getTreasuryDistribution(): BigInt {
    return this.value0;
  }

  getFarmDistribution(): BigInt {
    return this.value1;
  }
}

export class AuctioneerAuction__markBidResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }

  getUserBid(): BigInt {
    return this.value0;
  }

  getAuctionBidCost(): BigInt {
    return this.value1;
  }

  getAuctionHasEmissions(): boolean {
    return this.value2;
  }
}

export class AuctioneerAuction__markBidInput_optionsStruct extends ethereum.Tuple {
  get paymentType(): i32 {
    return this[0].toI32();
  }

  get multibid(): BigInt {
    return this[1].toBigInt();
  }

  get message(): string {
    return this[2].toString();
  }

  get rune(): i32 {
    return this[3].toI32();
  }
}

export class AuctioneerAuction__validateAndGetHarvestDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getUnlockTimestamp(): BigInt {
    return this.value0;
  }

  getBids(): BigInt {
    return this.value1;
  }

  getBiddersEmissions(): BigInt {
    return this.value2;
  }
}

export class AuctioneerAuction extends ethereum.SmartContract {
  static bind(address: Address): AuctioneerAuction {
    return new AuctioneerAuction("AuctioneerAuction", address);
  }

  BLAST(): Address {
    let result = super.call("BLAST", "BLAST():(address)", []);

    return result[0].toAddress();
  }

  try_BLAST(): ethereum.CallResult<Address> {
    let result = super.tryCall("BLAST", "BLAST():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  auctioneer(): Address {
    let result = super.call("auctioneer", "auctioneer():(address)", []);

    return result[0].toAddress();
  }

  try_auctioneer(): ethereum.CallResult<Address> {
    let result = super.tryCall("auctioneer", "auctioneer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  auctions(param0: BigInt): AuctioneerAuction__auctionsResult {
    let result = super.call(
      "auctions",
      "auctions(uint256):(uint256,uint256,string,bool,uint256,uint256,(uint256,uint256,uint256),(uint256,(uint256,address)[],(uint256,address)[]),(uint256,uint256,uint256,uint256,address,uint8,uint256,uint256),bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new AuctioneerAuction__auctionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toString(),
      result[3].toBoolean(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      changetype<AuctioneerAuction__auctionsResultEmissionsStruct>(
        result[6].toTuple(),
      ),
      changetype<AuctioneerAuction__auctionsResultRewardsStruct>(
        result[7].toTuple(),
      ),
      changetype<AuctioneerAuction__auctionsResultBidDataStruct>(
        result[8].toTuple(),
      ),
      result[9].toBoolean(),
    );
  }

  try_auctions(
    param0: BigInt,
  ): ethereum.CallResult<AuctioneerAuction__auctionsResult> {
    let result = super.tryCall(
      "auctions",
      "auctions(uint256):(uint256,uint256,string,bool,uint256,uint256,(uint256,uint256,uint256),(uint256,(uint256,address)[],(uint256,address)[]),(uint256,uint256,uint256,uint256,address,uint8,uint256,uint256),bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AuctioneerAuction__auctionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toString(),
        value[3].toBoolean(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        changetype<AuctioneerAuction__auctionsResultEmissionsStruct>(
          value[6].toTuple(),
        ),
        changetype<AuctioneerAuction__auctionsResultRewardsStruct>(
          value[7].toTuple(),
        ),
        changetype<AuctioneerAuction__auctionsResultBidDataStruct>(
          value[8].toTuple(),
        ),
        value[9].toBoolean(),
      ),
    );
  }

  bidCost(): BigInt {
    let result = super.call("bidCost", "bidCost():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bidCost(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bidCost", "bidCost():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bidIncrement(): BigInt {
    let result = super.call("bidIncrement", "bidIncrement():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bidIncrement(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bidIncrement", "bidIncrement():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cancelAuction(_lot: BigInt): AuctioneerAuction__cancelAuctionResult {
    let result = super.call(
      "cancelAuction",
      "cancelAuction(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_lot)],
    );

    return new AuctioneerAuction__cancelAuctionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_cancelAuction(
    _lot: BigInt,
  ): ethereum.CallResult<AuctioneerAuction__cancelAuctionResult> {
    let result = super.tryCall(
      "cancelAuction",
      "cancelAuction(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_lot)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AuctioneerAuction__cancelAuctionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  claimLot(
    _lot: BigInt,
    _user: Address,
    _userBids: BigInt,
    _userRune: i32,
  ): AuctioneerAuction__claimLotResult {
    let result = super.call(
      "claimLot",
      "claimLot(uint256,address,uint256,uint8):(uint256,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_lot),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_userBids),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_userRune)),
      ],
    );

    return new AuctioneerAuction__claimLotResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean(),
    );
  }

  try_claimLot(
    _lot: BigInt,
    _user: Address,
    _userBids: BigInt,
    _userRune: i32,
  ): ethereum.CallResult<AuctioneerAuction__claimLotResult> {
    let result = super.tryCall(
      "claimLot",
      "claimLot(uint256,address,uint256,uint8):(uint256,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_lot),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_userBids),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_userRune)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AuctioneerAuction__claimLotResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean(),
      ),
    );
  }

  dailyCumulativeEmissionBP(param0: BigInt): BigInt {
    let result = super.call(
      "dailyCumulativeEmissionBP",
      "dailyCumulativeEmissionBP(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_dailyCumulativeEmissionBP(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dailyCumulativeEmissionBP",
      "dailyCumulativeEmissionBP(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deadAddress(): Address {
    let result = super.call("deadAddress", "deadAddress():(address)", []);

    return result[0].toAddress();
  }

  try_deadAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("deadAddress", "deadAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  finalizeAuction(_lot: BigInt): AuctioneerAuction__finalizeAuctionResult {
    let result = super.call(
      "finalizeAuction",
      "finalizeAuction(uint256):(bool,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_lot)],
    );

    return new AuctioneerAuction__finalizeAuctionResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
    );
  }

  try_finalizeAuction(
    _lot: BigInt,
  ): ethereum.CallResult<AuctioneerAuction__finalizeAuctionResult> {
    let result = super.tryCall(
      "finalizeAuction",
      "finalizeAuction(uint256):(bool,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_lot)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AuctioneerAuction__finalizeAuctionResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
      ),
    );
  }

  getAuction(_lot: BigInt): AuctioneerAuction__getAuctionResultValue0Struct {
    let result = super.call(
      "getAuction",
      "getAuction(uint256):((uint256,uint256,string,bool,uint256,uint256,(uint8,uint256,uint256)[],(uint8,uint256,uint256,uint256)[],(uint256,uint256,uint256),(uint256,(uint256,address)[],(uint256,address)[]),(uint256,uint256,uint256,uint256,address,uint8,uint256,uint256),bool))",
      [ethereum.Value.fromUnsignedBigInt(_lot)],
    );

    return changetype<AuctioneerAuction__getAuctionResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getAuction(
    _lot: BigInt,
  ): ethereum.CallResult<AuctioneerAuction__getAuctionResultValue0Struct> {
    let result = super.tryCall(
      "getAuction",
      "getAuction(uint256):((uint256,uint256,string,bool,uint256,uint256,(uint8,uint256,uint256)[],(uint8,uint256,uint256,uint256)[],(uint256,uint256,uint256),(uint256,(uint256,address)[],(uint256,address)[]),(uint256,uint256,uint256,uint256,address,uint8,uint256,uint256),bool))",
      [ethereum.Value.fromUnsignedBigInt(_lot)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<AuctioneerAuction__getAuctionResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getAuctionExt(_lot: BigInt): AuctioneerAuction__getAuctionExtResult {
    let result = super.call(
      "getAuctionExt",
      "getAuctionExt(uint256):((uint256,uint256,string,bool,uint256,uint256,(uint8,uint256,uint256)[],(uint8,uint256,uint256,uint256)[],(uint256,uint256,uint256),(uint256,(uint256,address)[],(uint256,address)[]),(uint256,uint256,uint256,uint256,address,uint8,uint256,uint256),bool),(uint256,uint256,bool,bool,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_lot)],
    );

    return changetype<AuctioneerAuction__getAuctionExtResult>(
      new AuctioneerAuction__getAuctionExtResult(
        changetype<AuctioneerAuction__getAuctionExtResultAuctionStruct>(
          result[0].toTuple(),
        ),
        changetype<AuctioneerAuction__getAuctionExtResultExtStruct>(
          result[1].toTuple(),
        ),
      ),
    );
  }

  try_getAuctionExt(
    _lot: BigInt,
  ): ethereum.CallResult<AuctioneerAuction__getAuctionExtResult> {
    let result = super.tryCall(
      "getAuctionExt",
      "getAuctionExt(uint256):((uint256,uint256,string,bool,uint256,uint256,(uint8,uint256,uint256)[],(uint8,uint256,uint256,uint256)[],(uint256,uint256,uint256),(uint256,(uint256,address)[],(uint256,address)[]),(uint256,uint256,uint256,uint256,address,uint8,uint256,uint256),bool),(uint256,uint256,bool,bool,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_lot)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<AuctioneerAuction__getAuctionExtResult>(
        new AuctioneerAuction__getAuctionExtResult(
          changetype<AuctioneerAuction__getAuctionExtResultAuctionStruct>(
            value[0].toTuple(),
          ),
          changetype<AuctioneerAuction__getAuctionExtResultExtStruct>(
            value[1].toTuple(),
          ),
        ),
      ),
    );
  }

  getAuctionExts(
    _lots: Array<BigInt>,
  ): AuctioneerAuction__getAuctionExtsResult {
    let result = super.call(
      "getAuctionExts",
      "getAuctionExts(uint256[]):((uint256,uint256,string,bool,uint256,uint256,(uint8,uint256,uint256)[],(uint8,uint256,uint256,uint256)[],(uint256,uint256,uint256),(uint256,(uint256,address)[],(uint256,address)[]),(uint256,uint256,uint256,uint256,address,uint8,uint256,uint256),bool)[],(uint256,uint256,bool,bool,uint256)[])",
      [ethereum.Value.fromUnsignedBigIntArray(_lots)],
    );

    return new AuctioneerAuction__getAuctionExtsResult(
      result[0].toTupleArray<AuctioneerAuction__getAuctionExtsResultAuctionBasesStruct>(),
      result[1].toTupleArray<AuctioneerAuction__getAuctionExtsResultAuctionExtsStruct>(),
    );
  }

  try_getAuctionExts(
    _lots: Array<BigInt>,
  ): ethereum.CallResult<AuctioneerAuction__getAuctionExtsResult> {
    let result = super.tryCall(
      "getAuctionExts",
      "getAuctionExts(uint256[]):((uint256,uint256,string,bool,uint256,uint256,(uint8,uint256,uint256)[],(uint8,uint256,uint256,uint256)[],(uint256,uint256,uint256),(uint256,(uint256,address)[],(uint256,address)[]),(uint256,uint256,uint256,uint256,address,uint8,uint256,uint256),bool)[],(uint256,uint256,bool,bool,uint256)[])",
      [ethereum.Value.fromUnsignedBigIntArray(_lots)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AuctioneerAuction__getAuctionExtsResult(
        value[0].toTupleArray<AuctioneerAuction__getAuctionExtsResultAuctionBasesStruct>(),
        value[1].toTupleArray<AuctioneerAuction__getAuctionExtsResultAuctionExtsStruct>(),
      ),
    );
  }

  getAuctionsOnDay(_day: BigInt): Array<BigInt> {
    let result = super.call(
      "getAuctionsOnDay",
      "getAuctionsOnDay(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_day)],
    );

    return result[0].toBigIntArray();
  }

  try_getAuctionsOnDay(_day: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAuctionsOnDay",
      "getAuctionsOnDay(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_day)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAuctionsPerDay(_day: BigInt): BigInt {
    let result = super.call(
      "getAuctionsPerDay",
      "getAuctionsPerDay(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_day)],
    );

    return result[0].toBigInt();
  }

  try_getAuctionsPerDay(_day: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAuctionsPerDay",
      "getAuctionsPerDay(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_day)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDailyAuctions(
    lookBackDays: BigInt,
    lookForwardDays: BigInt,
  ): Array<AuctioneerAuction__getDailyAuctionsResultDataStruct> {
    let result = super.call(
      "getDailyAuctions",
      "getDailyAuctions(uint256,uint256):((uint256,uint256[])[])",
      [
        ethereum.Value.fromUnsignedBigInt(lookBackDays),
        ethereum.Value.fromUnsignedBigInt(lookForwardDays),
      ],
    );

    return result[0].toTupleArray<AuctioneerAuction__getDailyAuctionsResultDataStruct>();
  }

  try_getDailyAuctions(
    lookBackDays: BigInt,
    lookForwardDays: BigInt,
  ): ethereum.CallResult<
    Array<AuctioneerAuction__getDailyAuctionsResultDataStruct>
  > {
    let result = super.tryCall(
      "getDailyAuctions",
      "getDailyAuctions(uint256,uint256):((uint256,uint256[])[])",
      [
        ethereum.Value.fromUnsignedBigInt(lookBackDays),
        ethereum.Value.fromUnsignedBigInt(lookForwardDays),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<AuctioneerAuction__getDailyAuctionsResultDataStruct>(),
    );
  }

  getProfitDistributions(
    _lot: BigInt,
    _amount: BigInt,
  ): AuctioneerAuction__getProfitDistributionsResult {
    let result = super.call(
      "getProfitDistributions",
      "getProfitDistributions(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_lot),
        ethereum.Value.fromUnsignedBigInt(_amount),
      ],
    );

    return new AuctioneerAuction__getProfitDistributionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_getProfitDistributions(
    _lot: BigInt,
    _amount: BigInt,
  ): ethereum.CallResult<AuctioneerAuction__getProfitDistributionsResult> {
    let result = super.tryCall(
      "getProfitDistributions",
      "getProfitDistributions(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_lot),
        ethereum.Value.fromUnsignedBigInt(_amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AuctioneerAuction__getProfitDistributionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  linked(): boolean {
    let result = super.call("linked", "linked():(bool)", []);

    return result[0].toBoolean();
  }

  try_linked(): ethereum.CallResult<boolean> {
    let result = super.tryCall("linked", "linked():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lotCount(): BigInt {
    let result = super.call("lotCount", "lotCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lotCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lotCount", "lotCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  markBid(
    _lot: BigInt,
    _user: Address,
    _prevUserBids: BigInt,
    _prevRune: i32,
    _userGoBalance: BigInt,
    _options: AuctioneerAuction__markBidInput_optionsStruct,
  ): AuctioneerAuction__markBidResult {
    let result = super.call(
      "markBid",
      "markBid(uint256,address,uint256,uint8,uint256,(uint8,uint256,string,uint8)):(uint256,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_lot),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_prevUserBids),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_prevRune)),
        ethereum.Value.fromUnsignedBigInt(_userGoBalance),
        ethereum.Value.fromTuple(_options),
      ],
    );

    return new AuctioneerAuction__markBidResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean(),
    );
  }

  try_markBid(
    _lot: BigInt,
    _user: Address,
    _prevUserBids: BigInt,
    _prevRune: i32,
    _userGoBalance: BigInt,
    _options: AuctioneerAuction__markBidInput_optionsStruct,
  ): ethereum.CallResult<AuctioneerAuction__markBidResult> {
    let result = super.tryCall(
      "markBid",
      "markBid(uint256,address,uint256,uint8,uint256,(uint8,uint256,string,uint8)):(uint256,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_lot),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_prevUserBids),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_prevRune)),
        ethereum.Value.fromUnsignedBigInt(_userGoBalance),
        ethereum.Value.fromTuple(_options),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AuctioneerAuction__markBidResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean(),
      ),
    );
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onceTwiceBlastBonusTime(): BigInt {
    let result = super.call(
      "onceTwiceBlastBonusTime",
      "onceTwiceBlastBonusTime():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_onceTwiceBlastBonusTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "onceTwiceBlastBonusTime",
      "onceTwiceBlastBonusTime():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  privateAuctionRequirement(): BigInt {
    let result = super.call(
      "privateAuctionRequirement",
      "privateAuctionRequirement():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_privateAuctionRequirement(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "privateAuctionRequirement",
      "privateAuctionRequirement():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  runeSwitchPenalty(): BigInt {
    let result = super.call(
      "runeSwitchPenalty",
      "runeSwitchPenalty():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_runeSwitchPenalty(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "runeSwitchPenalty",
      "runeSwitchPenalty():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  runicLastBidderBonus(): BigInt {
    let result = super.call(
      "runicLastBidderBonus",
      "runicLastBidderBonus():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_runicLastBidderBonus(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "runicLastBidderBonus",
      "runicLastBidderBonus():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startingBid(): BigInt {
    let result = super.call("startingBid", "startingBid():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startingBid(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startingBid", "startingBid():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasury(): Address {
    let result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treasurySplit(): BigInt {
    let result = super.call("treasurySplit", "treasurySplit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_treasurySplit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "treasurySplit",
      "treasurySplit():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validateAndGetHarvestData(
    _lot: BigInt,
  ): AuctioneerAuction__validateAndGetHarvestDataResult {
    let result = super.call(
      "validateAndGetHarvestData",
      "validateAndGetHarvestData(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_lot)],
    );

    return new AuctioneerAuction__validateAndGetHarvestDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_validateAndGetHarvestData(
    _lot: BigInt,
  ): ethereum.CallResult<AuctioneerAuction__validateAndGetHarvestDataResult> {
    let result = super.tryCall(
      "validateAndGetHarvestData",
      "validateAndGetHarvestData(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_lot)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AuctioneerAuction__validateAndGetHarvestDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _bidCost(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _bidIncrement(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _startingBid(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _privateAuctionRequirement(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CancelAuctionCall extends ethereum.Call {
  get inputs(): CancelAuctionCall__Inputs {
    return new CancelAuctionCall__Inputs(this);
  }

  get outputs(): CancelAuctionCall__Outputs {
    return new CancelAuctionCall__Outputs(this);
  }
}

export class CancelAuctionCall__Inputs {
  _call: CancelAuctionCall;

  constructor(call: CancelAuctionCall) {
    this._call = call;
  }

  get _lot(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelAuctionCall__Outputs {
  _call: CancelAuctionCall;

  constructor(call: CancelAuctionCall) {
    this._call = call;
  }

  get unlockTimestamp(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get cancelledEmissions(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class ClaimLotCall extends ethereum.Call {
  get inputs(): ClaimLotCall__Inputs {
    return new ClaimLotCall__Inputs(this);
  }

  get outputs(): ClaimLotCall__Outputs {
    return new ClaimLotCall__Outputs(this);
  }
}

export class ClaimLotCall__Inputs {
  _call: ClaimLotCall;

  constructor(call: ClaimLotCall) {
    this._call = call;
  }

  get _lot(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _userBids(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _userRune(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class ClaimLotCall__Outputs {
  _call: ClaimLotCall;

  constructor(call: ClaimLotCall) {
    this._call = call;
  }

  get userShareOfLot(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get userShareOfPayment(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get triggerFinalization(): boolean {
    return this._call.outputValues[2].value.toBoolean();
  }
}

export class ClaimYieldAllCall extends ethereum.Call {
  get inputs(): ClaimYieldAllCall__Inputs {
    return new ClaimYieldAllCall__Inputs(this);
  }

  get outputs(): ClaimYieldAllCall__Outputs {
    return new ClaimYieldAllCall__Outputs(this);
  }
}

export class ClaimYieldAllCall__Inputs {
  _call: ClaimYieldAllCall;

  constructor(call: ClaimYieldAllCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _minClaimRateBips(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimYieldAllCall__Outputs {
  _call: ClaimYieldAllCall;

  constructor(call: ClaimYieldAllCall) {
    this._call = call;
  }
}

export class CreateAuctionCall extends ethereum.Call {
  get inputs(): CreateAuctionCall__Inputs {
    return new CreateAuctionCall__Inputs(this);
  }

  get outputs(): CreateAuctionCall__Outputs {
    return new CreateAuctionCall__Outputs(this);
  }
}

export class CreateAuctionCall__Inputs {
  _call: CreateAuctionCall;

  constructor(call: CreateAuctionCall) {
    this._call = call;
  }

  get _params(): CreateAuctionCall_paramsStruct {
    return changetype<CreateAuctionCall_paramsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get _emissions(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateAuctionCall__Outputs {
  _call: CreateAuctionCall;

  constructor(call: CreateAuctionCall) {
    this._call = call;
  }

  get lot(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateAuctionCall_paramsStruct extends ethereum.Tuple {
  get emissionBP(): BigInt {
    return this[0].toBigInt();
  }

  get isPrivate(): boolean {
    return this[1].toBoolean();
  }

  get lotValue(): BigInt {
    return this[2].toBigInt();
  }

  get name(): string {
    return this[3].toString();
  }

  get nfts(): Array<CreateAuctionCall_paramsNftsStruct> {
    return this[4].toTupleArray<CreateAuctionCall_paramsNftsStruct>();
  }

  get runeSymbols(): Array<i32> {
    return this[5].toI32Array();
  }

  get tokens(): Array<CreateAuctionCall_paramsTokensStruct> {
    return this[6].toTupleArray<CreateAuctionCall_paramsTokensStruct>();
  }

  get unlockTimestamp(): BigInt {
    return this[7].toBigInt();
  }

  get windows(): Array<CreateAuctionCall_paramsWindowsStruct> {
    return this[8].toTupleArray<CreateAuctionCall_paramsWindowsStruct>();
  }
}

export class CreateAuctionCall_paramsNftsStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get nft(): Address {
    return this[1].toAddress();
  }
}

export class CreateAuctionCall_paramsTokensStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get token(): Address {
    return this[1].toAddress();
  }
}

export class CreateAuctionCall_paramsWindowsStruct extends ethereum.Tuple {
  get duration(): BigInt {
    return this[0].toBigInt();
  }

  get timer(): BigInt {
    return this[1].toBigInt();
  }

  get windowType(): i32 {
    return this[2].toI32();
  }
}

export class FinalizeAuctionCall extends ethereum.Call {
  get inputs(): FinalizeAuctionCall__Inputs {
    return new FinalizeAuctionCall__Inputs(this);
  }

  get outputs(): FinalizeAuctionCall__Outputs {
    return new FinalizeAuctionCall__Outputs(this);
  }
}

export class FinalizeAuctionCall__Inputs {
  _call: FinalizeAuctionCall;

  constructor(call: FinalizeAuctionCall) {
    this._call = call;
  }

  get _lot(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FinalizeAuctionCall__Outputs {
  _call: FinalizeAuctionCall;

  constructor(call: FinalizeAuctionCall) {
    this._call = call;
  }

  get triggerCancellation(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get treasuryEmissions(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get treasuryETHDistribution(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get farmETHDistribution(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }
}

export class InitializeBlastCall extends ethereum.Call {
  get inputs(): InitializeBlastCall__Inputs {
    return new InitializeBlastCall__Inputs(this);
  }

  get outputs(): InitializeBlastCall__Outputs {
    return new InitializeBlastCall__Outputs(this);
  }
}

export class InitializeBlastCall__Inputs {
  _call: InitializeBlastCall;

  constructor(call: InitializeBlastCall) {
    this._call = call;
  }
}

export class InitializeBlastCall__Outputs {
  _call: InitializeBlastCall;

  constructor(call: InitializeBlastCall) {
    this._call = call;
  }
}

export class LinkCall extends ethereum.Call {
  get inputs(): LinkCall__Inputs {
    return new LinkCall__Inputs(this);
  }

  get outputs(): LinkCall__Outputs {
    return new LinkCall__Outputs(this);
  }
}

export class LinkCall__Inputs {
  _call: LinkCall;

  constructor(call: LinkCall) {
    this._call = call;
  }
}

export class LinkCall__Outputs {
  _call: LinkCall;

  constructor(call: LinkCall) {
    this._call = call;
  }
}

export class MarkBidCall extends ethereum.Call {
  get inputs(): MarkBidCall__Inputs {
    return new MarkBidCall__Inputs(this);
  }

  get outputs(): MarkBidCall__Outputs {
    return new MarkBidCall__Outputs(this);
  }
}

export class MarkBidCall__Inputs {
  _call: MarkBidCall;

  constructor(call: MarkBidCall) {
    this._call = call;
  }

  get _lot(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _prevUserBids(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _prevRune(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _userGoBalance(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _options(): MarkBidCall_optionsStruct {
    return changetype<MarkBidCall_optionsStruct>(
      this._call.inputValues[5].value.toTuple(),
    );
  }
}

export class MarkBidCall__Outputs {
  _call: MarkBidCall;

  constructor(call: MarkBidCall) {
    this._call = call;
  }

  get userBid(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get auctionBidCost(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get auctionHasEmissions(): boolean {
    return this._call.outputValues[2].value.toBoolean();
  }
}

export class MarkBidCall_optionsStruct extends ethereum.Tuple {
  get paymentType(): i32 {
    return this[0].toI32();
  }

  get multibid(): BigInt {
    return this[1].toBigInt();
  }

  get message(): string {
    return this[2].toString();
  }

  get rune(): i32 {
    return this[3].toI32();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SelectRuneCall extends ethereum.Call {
  get inputs(): SelectRuneCall__Inputs {
    return new SelectRuneCall__Inputs(this);
  }

  get outputs(): SelectRuneCall__Outputs {
    return new SelectRuneCall__Outputs(this);
  }
}

export class SelectRuneCall__Inputs {
  _call: SelectRuneCall;

  constructor(call: SelectRuneCall) {
    this._call = call;
  }

  get _lot(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _userBids(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _prevRune(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _rune(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class SelectRuneCall__Outputs {
  _call: SelectRuneCall;

  constructor(call: SelectRuneCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateBidCostCall extends ethereum.Call {
  get inputs(): UpdateBidCostCall__Inputs {
    return new UpdateBidCostCall__Inputs(this);
  }

  get outputs(): UpdateBidCostCall__Outputs {
    return new UpdateBidCostCall__Outputs(this);
  }
}

export class UpdateBidCostCall__Inputs {
  _call: UpdateBidCostCall;

  constructor(call: UpdateBidCostCall) {
    this._call = call;
  }

  get _bidCost(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateBidCostCall__Outputs {
  _call: UpdateBidCostCall;

  constructor(call: UpdateBidCostCall) {
    this._call = call;
  }
}

export class UpdatePrivateAuctionRequirementCall extends ethereum.Call {
  get inputs(): UpdatePrivateAuctionRequirementCall__Inputs {
    return new UpdatePrivateAuctionRequirementCall__Inputs(this);
  }

  get outputs(): UpdatePrivateAuctionRequirementCall__Outputs {
    return new UpdatePrivateAuctionRequirementCall__Outputs(this);
  }
}

export class UpdatePrivateAuctionRequirementCall__Inputs {
  _call: UpdatePrivateAuctionRequirementCall;

  constructor(call: UpdatePrivateAuctionRequirementCall) {
    this._call = call;
  }

  get _requirement(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePrivateAuctionRequirementCall__Outputs {
  _call: UpdatePrivateAuctionRequirementCall;

  constructor(call: UpdatePrivateAuctionRequirementCall) {
    this._call = call;
  }
}

export class UpdateRuneSwitchPenaltyCall extends ethereum.Call {
  get inputs(): UpdateRuneSwitchPenaltyCall__Inputs {
    return new UpdateRuneSwitchPenaltyCall__Inputs(this);
  }

  get outputs(): UpdateRuneSwitchPenaltyCall__Outputs {
    return new UpdateRuneSwitchPenaltyCall__Outputs(this);
  }
}

export class UpdateRuneSwitchPenaltyCall__Inputs {
  _call: UpdateRuneSwitchPenaltyCall;

  constructor(call: UpdateRuneSwitchPenaltyCall) {
    this._call = call;
  }

  get _penalty(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateRuneSwitchPenaltyCall__Outputs {
  _call: UpdateRuneSwitchPenaltyCall;

  constructor(call: UpdateRuneSwitchPenaltyCall) {
    this._call = call;
  }
}

export class UpdateRunicLastBidderBonusCall extends ethereum.Call {
  get inputs(): UpdateRunicLastBidderBonusCall__Inputs {
    return new UpdateRunicLastBidderBonusCall__Inputs(this);
  }

  get outputs(): UpdateRunicLastBidderBonusCall__Outputs {
    return new UpdateRunicLastBidderBonusCall__Outputs(this);
  }
}

export class UpdateRunicLastBidderBonusCall__Inputs {
  _call: UpdateRunicLastBidderBonusCall;

  constructor(call: UpdateRunicLastBidderBonusCall) {
    this._call = call;
  }

  get _bonus(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateRunicLastBidderBonusCall__Outputs {
  _call: UpdateRunicLastBidderBonusCall;

  constructor(call: UpdateRunicLastBidderBonusCall) {
    this._call = call;
  }
}

export class UpdateStartingBidCall extends ethereum.Call {
  get inputs(): UpdateStartingBidCall__Inputs {
    return new UpdateStartingBidCall__Inputs(this);
  }

  get outputs(): UpdateStartingBidCall__Outputs {
    return new UpdateStartingBidCall__Outputs(this);
  }
}

export class UpdateStartingBidCall__Inputs {
  _call: UpdateStartingBidCall;

  constructor(call: UpdateStartingBidCall) {
    this._call = call;
  }

  get _startingBid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateStartingBidCall__Outputs {
  _call: UpdateStartingBidCall;

  constructor(call: UpdateStartingBidCall) {
    this._call = call;
  }
}

export class UpdateTreasuryCall extends ethereum.Call {
  get inputs(): UpdateTreasuryCall__Inputs {
    return new UpdateTreasuryCall__Inputs(this);
  }

  get outputs(): UpdateTreasuryCall__Outputs {
    return new UpdateTreasuryCall__Outputs(this);
  }
}

export class UpdateTreasuryCall__Inputs {
  _call: UpdateTreasuryCall;

  constructor(call: UpdateTreasuryCall) {
    this._call = call;
  }

  get _treasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateTreasuryCall__Outputs {
  _call: UpdateTreasuryCall;

  constructor(call: UpdateTreasuryCall) {
    this._call = call;
  }
}

export class UpdateTreasurySplitCall extends ethereum.Call {
  get inputs(): UpdateTreasurySplitCall__Inputs {
    return new UpdateTreasurySplitCall__Inputs(this);
  }

  get outputs(): UpdateTreasurySplitCall__Outputs {
    return new UpdateTreasurySplitCall__Outputs(this);
  }
}

export class UpdateTreasurySplitCall__Inputs {
  _call: UpdateTreasurySplitCall;

  constructor(call: UpdateTreasurySplitCall) {
    this._call = call;
  }

  get _treasurySplit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateTreasurySplitCall__Outputs {
  _call: UpdateTreasurySplitCall;

  constructor(call: UpdateTreasurySplitCall) {
    this._call = call;
  }
}
