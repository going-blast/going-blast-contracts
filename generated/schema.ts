// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class AuctionMessage extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuctionMessage entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionMessage must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AuctionMessage", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AuctionMessage | null {
    return changetype<AuctionMessage | null>(
      store.get_in_block("AuctionMessage", id),
    );
  }

  static load(id: string): AuctionMessage | null {
    return changetype<AuctionMessage | null>(store.get("AuctionMessage", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get auction(): string {
    let value = this.get("auction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set auction(value: string) {
    this.set("auction", Value.fromString(value));
  }

  get auctionUser(): string | null {
    let value = this.get("auctionUser");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set auctionUser(value: string | null) {
    if (!value) {
      this.unset("auctionUser");
    } else {
      this.set("auctionUser", Value.fromString(<string>value));
    }
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get index(): i32 {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set index(value: i32) {
    this.set("index", Value.fromI32(value));
  }

  get user(): Bytes | null {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes | null) {
    if (!value) {
      this.unset("user");
    } else {
      this.set("user", Value.fromBytes(<Bytes>value));
    }
  }

  get alias(): string | null {
    let value = this.get("alias");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set alias(value: string | null) {
    if (!value) {
      this.unset("alias");
    } else {
      this.set("alias", Value.fromString(<string>value));
    }
  }

  get multibid(): BigInt | null {
    let value = this.get("multibid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set multibid(value: BigInt | null) {
    if (!value) {
      this.unset("multibid");
    } else {
      this.set("multibid", Value.fromBigInt(<BigInt>value));
    }
  }

  get prevRuneSymbol(): i32 {
    let value = this.get("prevRuneSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set prevRuneSymbol(value: i32) {
    this.set("prevRuneSymbol", Value.fromI32(value));
  }

  get runeSymbol(): i32 {
    let value = this.get("runeSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set runeSymbol(value: i32) {
    this.set("runeSymbol", Value.fromI32(value));
  }

  get message(): string | null {
    let value = this.get("message");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set message(value: string | null) {
    if (!value) {
      this.unset("message");
    } else {
      this.set("message", Value.fromString(<string>value));
    }
  }

  get bid(): BigInt | null {
    let value = this.get("bid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set bid(value: BigInt | null) {
    if (!value) {
      this.unset("bid");
    } else {
      this.set("bid", Value.fromBigInt(<BigInt>value));
    }
  }

  get tx(): Bytes | null {
    let value = this.get("tx");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tx(value: Bytes | null) {
    if (!value) {
      this.unset("tx");
    } else {
      this.set("tx", Value.fromBytes(<Bytes>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class AuctionRune extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuctionRune entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionRune must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AuctionRune", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AuctionRune | null {
    return changetype<AuctionRune | null>(
      store.get_in_block("AuctionRune", id),
    );
  }

  static load(id: string): AuctionRune | null {
    return changetype<AuctionRune | null>(store.get("AuctionRune", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get auction(): string {
    let value = this.get("auction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set auction(value: string) {
    this.set("auction", Value.fromString(value));
  }

  get runeSymbol(): i32 {
    let value = this.get("runeSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set runeSymbol(value: i32) {
    this.set("runeSymbol", Value.fromI32(value));
  }

  get bids(): BigInt {
    let value = this.get("bids");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bids(value: BigInt) {
    this.set("bids", Value.fromBigInt(value));
  }

  get users(): AuctionUserLoader {
    return new AuctionUserLoader(
      "AuctionRune",
      this.get("id")!.toString(),
      "users",
    );
  }
}

export class AuctionWindow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuctionWindow entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionWindow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AuctionWindow", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AuctionWindow | null {
    return changetype<AuctionWindow | null>(
      store.get_in_block("AuctionWindow", id),
    );
  }

  static load(id: string): AuctionWindow | null {
    return changetype<AuctionWindow | null>(store.get("AuctionWindow", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get windowType(): string {
    let value = this.get("windowType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set windowType(value: string) {
    this.set("windowType", Value.fromString(value));
  }

  get windowOpenTimestamp(): BigInt {
    let value = this.get("windowOpenTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set windowOpenTimestamp(value: BigInt) {
    this.set("windowOpenTimestamp", Value.fromBigInt(value));
  }

  get windowCloseTimestamp(): BigInt {
    let value = this.get("windowCloseTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set windowCloseTimestamp(value: BigInt) {
    this.set("windowCloseTimestamp", Value.fromBigInt(value));
  }

  get timer(): BigInt {
    let value = this.get("timer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timer(value: BigInt) {
    this.set("timer", Value.fromBigInt(value));
  }
}

export class AuctionEmissions extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuctionEmissions entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionEmissions must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AuctionEmissions", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AuctionEmissions | null {
    return changetype<AuctionEmissions | null>(
      store.get_in_block("AuctionEmissions", id),
    );
  }

  static load(id: string): AuctionEmissions | null {
    return changetype<AuctionEmissions | null>(
      store.get("AuctionEmissions", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bp(): BigInt {
    let value = this.get("bp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bp(value: BigInt) {
    this.set("bp", Value.fromBigInt(value));
  }

  get biddersEmission(): BigInt {
    let value = this.get("biddersEmission");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set biddersEmission(value: BigInt) {
    this.set("biddersEmission", Value.fromBigInt(value));
  }

  get treasuryEmission(): BigInt {
    let value = this.get("treasuryEmission");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set treasuryEmission(value: BigInt) {
    this.set("treasuryEmission", Value.fromBigInt(value));
  }
}

export class TokenData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TokenData | null {
    return changetype<TokenData | null>(store.get_in_block("TokenData", id));
  }

  static load(id: string): TokenData | null {
    return changetype<TokenData | null>(store.get("TokenData", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }
}

export class NftData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NftData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NftData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NftData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NftData | null {
    return changetype<NftData | null>(store.get_in_block("NftData", id));
  }

  static load(id: string): NftData | null {
    return changetype<NftData | null>(store.get("NftData", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftId(): BigInt {
    let value = this.get("nftId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nftId(value: BigInt) {
    this.set("nftId", Value.fromBigInt(value));
  }

  get nft(): Bytes {
    let value = this.get("nft");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set nft(value: Bytes) {
    this.set("nft", Value.fromBytes(value));
  }
}

export class AuctionRewards extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuctionRewards entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionRewards must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AuctionRewards", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AuctionRewards | null {
    return changetype<AuctionRewards | null>(
      store.get_in_block("AuctionRewards", id),
    );
  }

  static load(id: string): AuctionRewards | null {
    return changetype<AuctionRewards | null>(store.get("AuctionRewards", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get estimatedValue(): BigInt {
    let value = this.get("estimatedValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set estimatedValue(value: BigInt) {
    this.set("estimatedValue", Value.fromBigInt(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get nfts(): Array<string> {
    let value = this.get("nfts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set nfts(value: Array<string>) {
    this.set("nfts", Value.fromStringArray(value));
  }
}

export class AuctionBidData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuctionBidData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionBidData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AuctionBidData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AuctionBidData | null {
    return changetype<AuctionBidData | null>(
      store.get_in_block("AuctionBidData", id),
    );
  }

  static load(id: string): AuctionBidData | null {
    return changetype<AuctionBidData | null>(store.get("AuctionBidData", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get revenue(): BigInt {
    let value = this.get("revenue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set revenue(value: BigInt) {
    this.set("revenue", Value.fromBigInt(value));
  }

  get bid(): BigInt {
    let value = this.get("bid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bid(value: BigInt) {
    this.set("bid", Value.fromBigInt(value));
  }

  get nextBidBy(): BigInt {
    let value = this.get("nextBidBy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nextBidBy(value: BigInt) {
    this.set("nextBidBy", Value.fromBigInt(value));
  }

  get bidUser(): Bytes {
    let value = this.get("bidUser");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set bidUser(value: Bytes) {
    this.set("bidUser", Value.fromBytes(value));
  }

  get bidRune(): i32 {
    let value = this.get("bidRune");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set bidRune(value: i32) {
    this.set("bidRune", Value.fromI32(value));
  }

  get bids(): BigInt {
    let value = this.get("bids");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bids(value: BigInt) {
    this.set("bids", Value.fromBigInt(value));
  }

  get bidCost(): BigInt {
    let value = this.get("bidCost");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bidCost(value: BigInt) {
    this.set("bidCost", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get alias(): string | null {
    let value = this.get("alias");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set alias(value: string | null) {
    if (!value) {
      this.unset("alias");
    } else {
      this.set("alias", Value.fromString(<string>value));
    }
  }

  get interactedAuctions(): Array<string> {
    let value = this.get("interactedAuctions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set interactedAuctions(value: Array<string>) {
    this.set("interactedAuctions", Value.fromStringArray(value));
  }

  get harvestableAuctions(): Array<string> {
    let value = this.get("harvestableAuctions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set harvestableAuctions(value: Array<string>) {
    this.set("harvestableAuctions", Value.fromStringArray(value));
  }

  get totalBidsCount(): BigInt {
    let value = this.get("totalBidsCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalBidsCount(value: BigInt) {
    this.set("totalBidsCount", Value.fromBigInt(value));
  }

  get totalAuctionsParticipated(): BigInt {
    let value = this.get("totalAuctionsParticipated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAuctionsParticipated(value: BigInt) {
    this.set("totalAuctionsParticipated", Value.fromBigInt(value));
  }

  get totalEmissionsHarvested(): BigInt {
    let value = this.get("totalEmissionsHarvested");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalEmissionsHarvested(value: BigInt) {
    this.set("totalEmissionsHarvested", Value.fromBigInt(value));
  }

  get totalEmissionsBurned(): BigInt {
    let value = this.get("totalEmissionsBurned");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalEmissionsBurned(value: BigInt) {
    this.set("totalEmissionsBurned", Value.fromBigInt(value));
  }

  get totalAuctionsWon(): BigInt {
    let value = this.get("totalAuctionsWon");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAuctionsWon(value: BigInt) {
    this.set("totalAuctionsWon", Value.fromBigInt(value));
  }

  get chatBlacklisted(): boolean {
    let value = this.get("chatBlacklisted");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set chatBlacklisted(value: boolean) {
    this.set("chatBlacklisted", Value.fromBoolean(value));
  }
}

export class AuctionUser extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuctionUser entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionUser must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AuctionUser", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AuctionUser | null {
    return changetype<AuctionUser | null>(
      store.get_in_block("AuctionUser", id),
    );
  }

  static load(id: string): AuctionUser | null {
    return changetype<AuctionUser | null>(store.get("AuctionUser", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get auction(): string {
    let value = this.get("auction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set auction(value: string) {
    this.set("auction", Value.fromString(value));
  }

  get bids(): BigInt {
    let value = this.get("bids");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bids(value: BigInt) {
    this.set("bids", Value.fromBigInt(value));
  }

  get lastBidTimestamp(): BigInt | null {
    let value = this.get("lastBidTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastBidTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("lastBidTimestamp");
    } else {
      this.set("lastBidTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get rune(): string | null {
    let value = this.get("rune");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set rune(value: string | null) {
    if (!value) {
      this.unset("rune");
    } else {
      this.set("rune", Value.fromString(<string>value));
    }
  }

  get runeSymbol(): i32 {
    let value = this.get("runeSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set runeSymbol(value: i32) {
    this.set("runeSymbol", Value.fromI32(value));
  }

  get harvested(): boolean {
    let value = this.get("harvested");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set harvested(value: boolean) {
    this.set("harvested", Value.fromBoolean(value));
  }

  get claimed(): boolean {
    let value = this.get("claimed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set claimed(value: boolean) {
    this.set("claimed", Value.fromBoolean(value));
  }
}

export class Auction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Auction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Auction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Auction", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Auction | null {
    return changetype<Auction | null>(store.get_in_block("Auction", id));
  }

  static load(id: string): Auction | null {
    return changetype<Auction | null>(store.get("Auction", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lot(): BigInt {
    let value = this.get("lot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lot(value: BigInt) {
    this.set("lot", Value.fromBigInt(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get isPrivate(): boolean {
    let value = this.get("isPrivate");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isPrivate(value: boolean) {
    this.set("isPrivate", Value.fromBoolean(value));
  }

  get unlockTimestamp(): BigInt {
    let value = this.get("unlockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set unlockTimestamp(value: BigInt) {
    this.set("unlockTimestamp", Value.fromBigInt(value));
  }

  get runes(): Array<string> {
    let value = this.get("runes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set runes(value: Array<string>) {
    this.set("runes", Value.fromStringArray(value));
  }

  get windows(): Array<string> {
    let value = this.get("windows");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set windows(value: Array<string>) {
    this.set("windows", Value.fromStringArray(value));
  }

  get emissions(): string {
    let value = this.get("emissions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set emissions(value: string) {
    this.set("emissions", Value.fromString(value));
  }

  get rewards(): string {
    let value = this.get("rewards");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set rewards(value: string) {
    this.set("rewards", Value.fromString(value));
  }

  get bidData(): string {
    let value = this.get("bidData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set bidData(value: string) {
    this.set("bidData", Value.fromString(value));
  }

  get finalized(): boolean {
    let value = this.get("finalized");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set finalized(value: boolean) {
    this.set("finalized", Value.fromBoolean(value));
  }

  get users(): AuctionUserLoader {
    return new AuctionUserLoader(
      "Auction",
      this.get("id")!.toString(),
      "users",
    );
  }

  get hasRunes(): boolean {
    let value = this.get("hasRunes");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set hasRunes(value: boolean) {
    this.set("hasRunes", Value.fromBoolean(value));
  }

  get activeWindow(): BigInt {
    let value = this.get("activeWindow");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set activeWindow(value: BigInt) {
    this.set("activeWindow", Value.fromBigInt(value));
  }

  get biddingOpen(): boolean {
    let value = this.get("biddingOpen");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set biddingOpen(value: boolean) {
    this.set("biddingOpen", Value.fromBoolean(value));
  }

  get ended(): boolean {
    let value = this.get("ended");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set ended(value: boolean) {
    this.set("ended", Value.fromBoolean(value));
  }

  get cancelled(): boolean {
    let value = this.get("cancelled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set cancelled(value: boolean) {
    this.set("cancelled", Value.fromBoolean(value));
  }

  get messagesCount(): i32 {
    let value = this.get("messagesCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set messagesCount(value: i32) {
    this.set("messagesCount", Value.fromI32(value));
  }
}

export class AuctionUserLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): AuctionUser[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<AuctionUser[]>(value);
  }
}
